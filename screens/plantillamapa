import React, {useState, useEffect} from 'react';
import { StyleSheet,
     View,
     Dimensions,
    TouchableOpacity,
    Text,
    } from 'react-native';
import MapView, { PROVIDER_GOOGLE, Marker } from 'react-native-maps';
import { useMap } from '../functions/usemap';
import * as TaskManager from "expo-task-manager"
import * as Location from "expo-location"



export default function GetMap() {

    const [marker, setMarker] = useState(null
    );

  const {
    mapRef,
  } = useMap();



  const LOCATION_TASK_NAME = "LOCATION_TASK_NAME"
  let foregroundSubscription = null
  
  // Define the background task for location tracking
  TaskManager.defineTask(LOCATION_TASK_NAME, async ({ data, error }) => {
    if (error) {
      console.error(error)
      return
    }
    if (data) {
      // Extract location coordinates from data
      const { locations } = data
      const location = locations[0]
      if (location) {
        console.log("Location in background", location.coords)
      }
    }
  })

  // Define position state: {latitude: number, longitude: number}
  const [position, setPosition] = useState(null)

  // Request permissions right after starting the app
  useEffect(() => {
    startForegroundUpdate()
  }, [])

  const requestPermissions = async () => {
    const foreground = await Location.requestForegroundPermissionsAsync()
    if (foreground.granted) await Location.requestBackgroundPermissionsAsync()
  }

  // Start location tracking in foreground
  const startForegroundUpdate = async () => {
    requestPermissions()
    // Check if foreground permission is granted
    const { granted } = await Location.getForegroundPermissionsAsync()
    if (!granted) {
      console.log("location tracking denied")
      return
    }

    // Make sure that foreground location tracking is not running
    foregroundSubscription?.remove()

    // Start watching position in real-time
    foregroundSubscription = await Location.watchPositionAsync(
      {
        // For better logs, we set the accuracy to the most sensitive option
        accuracy: Location.Accuracy.BestForNavigation,
      },
      location => {
        setPosition(location.coords)
      }
    )
  }

  return (
    <View style={styles.container}>

            <MapView
        ref={mapRef}
        customMapStyle={styles.mapStyle}
        showsUserLocation={position}
        provider={PROVIDER_GOOGLE}
        style={styles.mapStyle}
        initialRegion={position}
        onPress={ e => {
           
            setMarker(e.nativeEvent.coordinate)
            console.log(marker)

            }
        }>
        <Marker coordinate={position}/>    
        
      </MapView>
    </View>

    
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
    alignItems: 'center',
    justifyContent: 'center',
  },
  mapStyle: {
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
  confirmbt: {
    postbutton: {
        backgroundColor: '#4287f5',
        height: 60,
        width: 60,
        borderRadius: 30,
        top: "650%",
        left: "75%",
        position: 'absolute',
        elevation: 4,
      },
  },
});